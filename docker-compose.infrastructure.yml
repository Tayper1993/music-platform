version: '3.8'

services:
  minio:
    image: minio/minio
    container_name: music_minio
    ports:
      - "9000:9000"   # S3 API
      - "9001:9001"   # Web UI
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - music_network

  postgres:
    image: postgres:15
    container_name: music_postgres
    environment:
      POSTGRES_MULTIPLE_DATABASES: "music_auth,music_catalog,music_analytics"
      POSTGRES_USER: music_admin
      POSTGRES_PASSWORD: music_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U music_admin"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - music_network

  redis:
    image: redis:7-alpine
    container_name: music_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - music_network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: music_rabbitmq
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: rabbit_admin
      RABBITMQ_DEFAULT_PASS: rabbit_password
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - music_network

volumes:
  minio_data:
  postgres_data:
  redis_data:

networks:
  music_network:
    driver: bridge